/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.3/userguide/building_java_projects.html
 */

buildscript {
	ext {
        springBootVersion = '2.2.6.RELEASE'
        springDependencyVersion = '1.0.9.RELEASE'
        sonarVersion = '3.0'
        queryDslVersion = '4.4.0'
        mapstructVersion = "1.4.2.Final"
        lombokMapstructVersion = "0.2.0"
        
        appVersion = '0.0.1'
	
		webResourceConfig = [
	        staticFilesDir : "src/main/webapp",
	        baseDir: "META-INF/resources",
	        name : "vartool-static"+appVersion
	    ]
    }

	repositories {
		mavenCentral()
		jcenter()
		maven {
	      url "https://plugins.gradle.org/m2/"
	    }
	}

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyVersion}"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarVersion}"
        classpath("com.querydsl:querydsl-jpa:${queryDslVersion}")
        classpath("com.querydsl:querydsl-apt:${queryDslVersion}")
    }
}


apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


configurations {
 	compileOnly {
 		extendsFrom annotationProcessor
 	}
 }

    
repositories {
    mavenCentral()
	jcenter()
	flatDir{dirs rootProject.file( 'libs' )}
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

task initSourceFolders {
    sourceSets*.java.srcDirs*.each {
        if( !it.exists() ) {
            it.mkdirs()
        }
    }

    sourceSets*.resources.srcDirs*.each {
        if( !it.exists() ) {
            it.mkdirs()
        }
    }
}

def generated = "src/main/generated"

sourceSets {
	main.java.srcDirs += [ generated ]
}

tasks.withType(JavaCompile) {
	options.compilerArgs += [
        '-Amapstruct.suppressGeneratorTimestamp=true',
        '-Amapstruct.suppressGeneratorVersionInfoComment=true',
        '-Amapstruct.verbose=true'
    ]

	options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

def def_version = [
	springData: '2.2.6.RELEASE'
	,springSecurity: '5.2.1.RELEASE'
	,servletApi: '4.0.0'
	,jackson : '2.9.9'
	,poi : '4.1.2'
	,tiles : '3.0.7'
	,tomcat : '9.0.58'
	,jspApi : '2.3.3'
	,slf4j : '1.7.30'
	,tiles : '3.0.7'
	,junit : '5.2.0'
	,junitPlatform : '1.5.0'
	,mockito: '3.3.3'
	,lombok : '1.18.22'
	,querydslSql : '5.0.0'
	,jstl : '1.2.5'
]

bootJar {
    enabled = false
}

bootWar {
    enabled = false
}

dependencies {
	annotationProcessor( [group: 'org.projectlombok' , name: 'lombok' , version: def_version.lombok])
	testAnnotationProcessor([group: 'org.projectlombok' , name: 'lombok' , version: def_version.lombok])
	implementation group: 'org.projectlombok' , name: 'lombok' , version: def_version.lombok


	testImplementation(
		 [ group: 'org.junit.jupiter' , name: 'junit-jupiter-api' , version: def_version.junit ]
		,[ group: 'org.junit.jupiter' , name: 'junit-jupiter-engine' , version: def_version.junit ]
		,[ group: 'org.junit.jupiter' , name: 'junit-jupiter-params' , version: def_version.junit ]
		//,[ group: 'org.junit.vintage' , name: 'junit-vintage-engine' , version: def_version.junit ]

		,[ group: 'org.junit.platform' , name: 'junit-platform-launcher' , version: def_version.junitPlatform ]
		,[ group: 'org.junit.platform' , name: 'junit-platform-runner' , version: def_version.junitPlatform ]
		// mockito
		,[ group: 'org.mockito', name: 'mockito-core', version: def_version.mockito ]

	)

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	implementation fileTree (dir: rootProject.file( 'libs' ), include:['*.jar'])


	implementation( // spring
		[ group: 'org.springframework.boot' , name: 'spring-boot-devtools']
		,[ group: 'org.springframework.boot' , name: 'spring-boot-starter-data-jpa' ]
		,[ group: 'org.springframework.boot' , name: 'spring-boot-starter-security']
		,[ group: 'org.springframework.boot' , name: 'spring-boot-starter-web' ]
		,[ group: 'org.springframework.boot' , name: 'spring-boot-starter-websocket']
		,[ group: 'org.springframework.boot' , name: 'spring-boot-starter-cache']
		// ,[ group: 'org.springframework.security' , name: 'spring-security-config' , version: def_version.springSecurity ]
		,[ group: 'org.springframework.security' , name: 'spring-security-messaging' , version: def_version.springSecurity ] // websocket message �߰�.
		,[ group: 'org.springframework.security' , name: 'spring-security-taglibs' , version: def_version.springSecurity ]


		// jpa model history
		,[ group: 'org.springframework.data' , name: 'spring-data-envers' , version: def_version.springData ]
	)

	implementation( // apache.commons
		[ group: 'org.apache.commons' , name: 'commons-dbcp2' , version: '2.9.0']
		,[ group: 'org.apache.commons' , name: 'commons-collections4' , version: '4.4']
		,[ group: 'org.apache.commons' , name: 'commons-lang3' , version: '3.9']
		,[ group: 'org.apache.commons' , name: 'commons-csv' , version: '1.7']
		,[ group: 'org.apache.commons' , name: 'commons-compress' , version: '1.18']
		,[ group: 'org.apache.commons', name: 'commons-text', version: '1.9']
		,[ group: 'org.apache.commons', name: 'commons-exec', version: '1.3']
		,[ group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13']
	)

	implementation( // poi
		[ group: 'org.apache.poi' , name: 'poi' , version: def_version.poi ]
		,[ group: 'org.apache.poi' , name: 'poi-ooxml' , version: def_version.poi ]
	)

	implementation( // tiles
		[ group: 'org.apache.tiles' , name: 'tiles-core' , version: def_version.tiles ]
		,[ group: 'org.apache.tiles' , name: 'tiles-jsp' , version: def_version.tiles ]
		,[ group: 'org.apache.tiles' , name: 'tiles-el' , version: def_version.tiles ]
	)

	implementation( // log
		[ group: 'org.slf4j' , name: 'slf4j-api' , version: def_version.slf4j]
		,[ group: 'ch.qos.logback' , name: 'logback-classic' , version: '1.2.9']
		,[ group: 'org.codehaus.janino' , name: 'janino' , version: '3.0.12']
	)

	// cache module
	implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.8.8'
	
	// jgit
	implementation group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '5.7.0.202003090808-r'

	// guava
	implementation group: 'com.google.guava', name: 'guava', version: '18.0'

	// xml to json
	implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.11.2'

	implementation group: 'com.zaxxer', name: 'HikariCP', version: '3.4.1'
	implementation group: 'org.jdom' , name: 'jdom' , version: '1.1.3'
	implementation group: 'org.mybatis' , name: 'mybatis' , version: '3.5.5'
	implementation group: 'org.mybatis' , name: 'mybatis-spring' , version: '2.0.5'

	implementation group: 'commons-io' , name: 'commons-io' , version: '2.6'
	implementation group: 'commons-fileupload' , name: 'commons-fileupload' , version: '1.4'
	implementation group: 'commons-codec' , name: 'commons-codec' , version: '1.11'

	//Reflections
	implementation group: 'org.reflections', name: 'reflections', version: '0.9.9'
	
	// model mapper
	implementation group: 'org.modelmapper', name: 'modelmapper', version: '3.0.0'
	

	implementation group: 'com.thoughtworks.xstream' , name: 'xstream' , version: '1.4.11'
	implementation group: 'org.antlr' , name: 'stringtemplate' , version: '4.0.2'
	implementation group: 'com.github.jknack' , name: 'handlebars' , version: '4.2.0'

	// jstl apache
	implementation(
		[group: 'org.apache.taglibs', name: 'taglibs-standard-spec', version: def_version.jstl ]
		,[group: 'org.apache.taglibs', name: 'taglibs-standard-jstlel', version: def_version.jstl ]
	)
	//implementation group: 'javax.servlet' , name: 'jstl' , version: '1.2'  //2020-07-26

	// tomcat
	providedCompile 'org.apache.tomcat.embed:tomcat-embed-jasper'

	providedCompile(
		[ group: 'javax.servlet' , name: 'javax.servlet-api' , version: '4.0.0' ]
		, [ group: 'javax.servlet.jsp', name: 'javax.servlet.jsp-api', version: def_version.jspApi ]
		, [ group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat']
		, [ group: 'org.apache.tomcat.embed', name: 'tomcat-embed-jasper']
	)

	// db driver
	implementation(
		[ group: 'com.h2database' , name: 'h2' , version: '1.4.200' ]
	)
	
	implementation(
		[group: 'org.mapstruct', name: 'mapstruct', version: project.property('mapstructVersion')]
		,[group: 'com.querydsl' , name: 'querydsl-core']
		,[group: 'com.querydsl' , name: 'querydsl-apt']
		,[group: 'com.querydsl' , name: 'querydsl-jpa']
		,[group: 'com.querydsl' , name: 'querydsl-sql', version: project.property('queryDslVersion')]
		,[group: 'com.querydsl' , name: 'querydsl-sql-spring', version: project.property('queryDslVersion')]
	)
	
	
	annotationProcessor(
		"com.querydsl:querydsl-apt:"+project.property('queryDslVersion')+":jpa",
		"org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final",
		"javax.annotation:javax.annotation-api",
		"org.mapstruct:mapstruct-processor:" +project.property('mapstructVersion'),
		"org.projectlombok:lombok",
		"org.projectlombok:lombok-mapstruct-binding:"+project.property('lombokMapstructVersion')
	)
}

test {
    useJUnitPlatform()
}

task generateCode {
    doLast {
        println 'Generating some code...'
    }
}

task generateCustomConfig {
    doLast {
          println "Generating custom configuration..."
    }
}


eclipse { // 이클립스 project facets설정.

	project.natures 'org.springsource.ide.eclipse.gradle.core.nature'

	//프로젝트를 가져 오거나 동기화
	synchronizationTasks generateCustomConfig

	// 자동 빌드
	autoBuildTasks generateCode

	classpath {
        defaultOutputDir = file("target-notused")
        file.whenMerged {
            entries.each { entry ->
                if (entry.kind == 'src' && entry.hasProperty('output')) {
                    entry.output = entry.output.replace('bin/', "target/")
                }
            }
        }
    }
    
    jdt {
	    file {
	      withProperties { properties ->
	        // set properties for the file org.eclipse.jdt.core.prefs
	        properties['org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation'] = 'ignore'
	        properties['org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation'] = 'ignore'
	      }
	    }
	  }

	wtp {
        component {
            contextPath = project.name // context path 지정
        }
        facet {
        	facets = []
			facet name: 'jst.web', version: '3.1'
            facet name: 'jst.java', version: sourceCompatibility // Java Version
        }
    }
}

// JAVA file compile charset
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'


clean.doLast {
	file(generated).deleteDir()
}

jar{
	enabled=true
	baseName ='vartool-app'+appVersion
}

//web resource jar packaging
task webResourceJar(type: Jar) {
	baseName=webResourceConfig.name;
    from(fileTree(webResourceConfig.staticFilesDir)) {
    	exclude 'META-INF'
        into webResourceConfig.baseDir
    }
}


war{
	enabled=true
	// war name
	baseName ='vtool' +appVersion

	exclude 'webstatic' ,'WEB-INF/*'

	classpath = classpath - sourceSets.main.output

	from (jar) {
		into 'WEB-INF/lib'
	}

	from (webResourceJar) {
		into 'WEB-INF/lib'
	}

	doLast {
		println("appVersion : " + appVersion)
		println("war export path : " + archivePath.parent)
		//불필요한 파익 삭제.
		def fileDelFlag = true;
		if(fileDelFlag){
			delete fileTree(archivePath.parent) {
				include '*.jar'
			}
		}
    }
}